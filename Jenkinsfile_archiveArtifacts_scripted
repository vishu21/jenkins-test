def imageName = "vbrar6076/webapp-demo"
def imageTag = "latest"
def dockerHubCreds = "docker-login"
def slackWebhook = ''

// Stage 1: Prepare the source on controller
node('controller-node') {
    stage('Clone Repo & Stash Source') {
        git branch: 'main', url: 'https://github.com/vishu21/webapp-demo.git'
        stash name: 'source-code', includes: '**/*'
    }

    stage('Load Slack Credential') {
        slackWebhook = credentials('slack-webhook')
    }
}

// Stage 2: Build and push on Docker-capable agent
node('docker') {
    try {
        stage('Unstash & Build Docker Image') {
            unstash 'source-code'
            sh "docker build -t ${imageName}:${imageTag} ."
        }

        stage('Push to Docker Hub') {
            withCredentials([usernamePassword(credentialsId: dockerHubCreds, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                sh """
                    echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                    docker push ${imageName}:${imageTag}
                    docker logout
                """
            }
        }

        stage('Cleanup') {
            sh "docker rmi ${imageName}:${imageTag} || true"
        }

        stage('Slack Success Notification') {
            slackNotify(slackWebhook, "✅ SUCCESS: Job ${env.JOB_NAME} #${env.BUILD_NUMBER} completed successfully.")
        }

    } catch (err) {
        stage('Slack Failure Notification') {
            slackNotify(slackWebhook, "❌ FAILURE: Job ${env.JOB_NAME} #${env.BUILD_NUMBER} failed.")
        }
        throw err
    }
}

// Helper function for Slack notifications
def slackNotify(webhook, message) {
    sh """
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"${message}"}' ${webhook}
    """
}
